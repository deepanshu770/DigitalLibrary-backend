generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  username String @id @db.VarChar(50)
  password String @db.VarChar(100)
}

model sessions {
  id         Int             @id @default(autoincrement())
  student_id String          @db.VarChar(20)
  entry_time DateTime        @db.DateTime(0)
  exit_time  DateTime?       @db.DateTime(0)
  status     sessions_status
  students   students        @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "fk_student")

  @@index([student_id], map: "fk_student")
}

model students {
  student_id String     @id @db.VarChar(20)
  name       String     @db.VarChar(100)
  password   String     @db.VarChar(255)
  course     String     @db.VarChar(100)
  department String     @db.VarChar(100)
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  sessions   sessions[]

  bookings bookings[] @relation(map: "fk_booking_student")
}

enum sessions_status {
  IN
  OUT
}

model meeting_rooms {
  room_id    Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  capacity   Int
  amenities  Json
  location   String?    @db.VarChar(100)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @updatedAt @db.Timestamp(0)
  bookings   bookings[]
}

model bookings {
  booking_id Int            @id @default(autoincrement())
  student_id String         @db.VarChar(20)
  room_id    Int
  start_time DateTime       @db.DateTime(0)
  end_time   DateTime       @db.DateTime(0)
  status     booking_status @default(PENDING)

  student students      @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "fk_booking_student")
  room    meeting_rooms @relation(fields: [room_id], references: [room_id], onDelete: Cascade, map: "fk_booking_room")

  @@unique([room_id, start_time, end_time], map: "unique_room_booking") // prevents overlapping double-bookings
  @@index([student_id], map: "fk_booking_student")
  @@index([room_id], map: "fk_booking_room")
}

enum booking_status {
  PENDING
  CONFIRMED
  CANCELLED
}
